import pickle, glob, shutil, copy
from scipy import io
""" this script opens and processes vbar data into pickle for analysis. This assumes generated by dataExplore.m file """
flist = sorted(glob.glob('/home/spike/repos/myOCM/data/processed/*.mat'))
monSave, daySave = None, None
meanI, QCspan, stdV, prob, ci, cispan, SNR, stack, xy, time, y, meanV, param,  = [],[] ,[],[],[],[],[],[],[],[],[],[],[]
for file in flist:
    # first see if i need to save, previous file before parsing this file
    fileSplit = file.split('/')[-1].split('_')
    mon = fileSplit[2]
    day = fileSplit[3]
    if (mon == monSave or monSave is None) and (day == daySave or daySave is None):
        monSave = copy.copy(mon)
        daySave = copy.copy(day)
    else:
        # save file and clear variables
        dict = {'param': param,
                'time': time,
                'yFRF': y,
                'meanV_plot': meanV,
                'meanI': meanI,
                'QCspan': QCspan,
                'stdV': stdV,
                'prob': prob,
                'ci': ci,
                'cispan': cispan,
                'SNR': SNR,
                'stack': stack,
                'xy': xy}
        fname = '/home/spike/repos/myOCM/data/pickles/save_{}_{}.pickle'.format(monSave, daySave)
        with open(fname, 'wb') as fid:
            pickle.dump(dict, fid, protocol=pickle.HIGHEST_PROTOCOL)
        meanI, QCspan, stdV, prob, ci, cispan, SNR, stack, xy, time, y, meanV, param, = [], [], [], [], [], [], [], [], [], [], [], [], []
        print('\n\nSaved {} \n\n'.format(fname))
        monSave, daySave = None, None
    try:
        data = io.loadmat(file)
        print('loaded File {}'.format(file))
        paramDict = {'dyOut': data['dataSave']['param'][0, 0]['dyOut'][0, 0].squeeze(),
                     'yWin': data['dataSave']['param'][0, 0]['dyWindow'][0, 0].squeeze(),
                     'dyInterpOut': data['dataSave']['param'][0, 0]['dyInterpOut'][0, 0].squeeze(),
                     'vB': data['dataSave']['param'][0, 0]['vB'][0, 0].squeeze(),
                     'fkB': data['dataSave']['param'][0, 0]['fkB'][0, 0].squeeze(),
                     'Tstep': data['dataSave']['param'][0, 0]['Tstep'][0, 0].squeeze(),
                     'Twin': data['dataSave']['param'][0, 0]['Twin'][0, 0].squeeze(),
                     'outputYlocations': data['dataSave']['param'][0, 0]['outputYlocations'][0, 0].squeeze(), }
        param.append(paramDict)
        time.append(data['dataSave']['t'][0,0])
        y.append(data['dataSave']['y'][0,0])
        meanV.append(data['dataSave']['meanV_plot'][0,0])
        meanI.append(data['dataSave']['meanI'][0,0])
        QCspan.append(data['dataSave']['QCspan'][0,0])
        stdV.append(data['dataSave']['stdV'][0,0])
        prob.append(data['dataSave']['prob'][0,0])
        ci.append(data['dataSave']['ci'][0,0])
        cispan.append(data['dataSave']['cispan'][0,0])
        SNR.append(data['dataSave']['SNR'][0,0])
        #stack.append(data['dataSave']['stack'][0,0])
        xy.append(data['dataSave']['xy'][0,0])
    except(KeyError,ValueError):
        print('   moving File {}'.format(file))
        shutil.move(file, '/home/spike/repos/myOCM/data/processed/origProc')


print('Done')
print('yay')